use ark_bn254::{constraints::GVar, Bn254, Fr, G1Projective as G1};
use ark_groth16::Groth16;
use ark_grumpkin::{constraints::GVar as GVar2, Projective as G2};
use sonobe::{
    commitment::{kzg::KZG, pedersen::Pedersen},
    folding::nova::decider_eth::Decider as DeciderEth,
    Decider as DeciderTrait,
};
use sonobe_frontends::circom::CircomFCircuit;

use crate::sonobe_backend::folding::Folding;

/// Compressed proof producer.
pub type Decider = DeciderEth<
    G1,
    GVar,
    G2,
    GVar2,
    CircomFCircuit<Fr>,
    KZG<'static, Bn254>,
    Pedersen<G2>,
    Groth16<Bn254>,
    Folding,
>;

pub type DeciderVerifierParam =
    <Decider as DeciderTrait<G1, G2, CircomFCircuit<Fr>, Folding>>::VerifierParam;
pub type DeciderProof = <Decider as DeciderTrait<G1, G2, CircomFCircuit<Fr>, Folding>>::Proof;

/// Verify the final proof generated by the folding scheme and the decider wrapper.
pub fn verify_final_proof(
    proof: &DeciderProof,
    folding: &Folding,
    decider_vp: DeciderVerifierParam,
) {
    assert!(Decider::verify(
        decider_vp,
        folding.i,
        folding.z_0.clone(),
        folding.z_i.clone(),
        &folding.U_i,
        &folding.u_i,
        proof,
    )
    .expect("Failed to verify proof"))
}
